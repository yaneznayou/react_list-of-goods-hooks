{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","initialGoods","field","order","App","useState","sortField","setSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabetically","localeCompare","ByLength","length","Reverse","reverse","getPreparedGoods","isShowReset","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,iFAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gCAAAA,E,kBAAAA,E,mBAAAA,M,KAkCL,IAAME,EAA0B,CAAEC,MAAO,GAAIC,MAAO,IAEvCC,EAAgB,WAC3B,MAAkCC,mBAAoBJ,GAAtD,mBAAOK,EAAP,KAAkBC,EAAlB,KACMC,EA3BR,SAA0BC,EAAiBH,GACzC,IAAMI,EAAa,YAAOD,GAmB1B,OAjBIH,EAAUJ,OACZQ,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQP,EAAUJ,OAChB,KAAKH,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,EAAUH,QAAUJ,EAASmB,SAC/BR,EAAcS,UAGTT,EAOcU,CAAiBpB,EAAiBM,GACjDe,EAAcf,EAAUJ,OAASI,EAAUH,MAUjD,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,EAAUJ,QAAUH,EAASe,iBAE3CW,QAAS,WACPlB,EAAa,2BAAKD,GAAN,IAAiBJ,MAAOH,EAASe,mBANjD,iCAYA,wBACES,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,EAAUJ,QAAUH,EAASiB,WAE3CS,QAAS,WACPlB,EAAa,2BAAKD,GAAN,IAAiBJ,MAAOH,EAASiB,aANjD,4BAYA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,EAAUH,QAAUJ,EAASmB,UAE3CO,QAxCc,WAChBnB,EAAUH,MACZI,EAAa,2BAAKD,GAAN,IAAiBH,MAAO,MAEpCI,EAAa,2BAAKD,GAAN,IAAiBH,MAAOJ,EAASmB,YA+B3C,qBASCG,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMlB,EAAaN,IAH9B,sBASHO,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,UCjHfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4ab1b971.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'alphabetically',\n  ByLength = 'length',\n  Reverse = 'reverse',\n}\n\ninterface SortField {\n  field: SortType | '';\n  order: SortType | '';\n}\n\nfunction getPreparedGoods(goods: string[], sortField: SortField): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField.field) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField.field) {\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n        case SortType.ByLength:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortField.order === SortType.Reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nconst initialGoods: SortField = { field: '', order: '' };\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(initialGoods);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField);\n  const isShowReset = sortField.field || sortField.order;\n\n  const handleReverse = () => {\n    if (sortField.order) {\n      setSortField({ ...sortField, order: '' });\n    } else {\n      setSortField({ ...sortField, order: SortType.Reverse });\n    }\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField.field !== SortType.Alphabetically,\n          })}\n          onClick={() => {\n            setSortField({ ...sortField, field: SortType.Alphabetically });\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField.field !== SortType.ByLength,\n          })}\n          onClick={() => {\n            setSortField({ ...sortField, field: SortType.ByLength });\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': sortField.order !== SortType.Reverse,\n          })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n        {isShowReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortField(initialGoods)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      {visibleGoods.map(good => (\n        <li\n          data-cy=\"Good\"\n          key={good}\n        >\n          {good}\n        </li>\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}